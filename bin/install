#!/usr/bin/env bash

#import ENV variables
source curl -s "${FULL_REPO_URL}/bin/export-env" | bash

# Function to ask user for installation and download config
install() {
    local tool_name=$1
    local tool_package=$2
    local config_url=$3

    while true; do
            read -p "Do you want to install $(echo -e ${GREEN}$tool_name${NC})? (y/n): " yn
            case $yn in
                [Yy]* )
                    echo -e "Installing ${GREEN}$tool_name${NC}..."
                    composer require --dev $tool
                    if [[ -n "$config_url" ]]; then
                        config_file=$(basename "$config_url")
                        echo -e "Downloading configuration for ${GREEN}$tool_name${NC}..."
                        curl -sS -o "$config_file" "$config_url"
                    fi
                    break
                    ;;
                [Nn]* )
                    echo -e "Skipping ${GREEN}$tool_name${NC}\n"
                    break
                    ;;
                * )
                    echo "Please answer yes or no."
                    ;;
            esac
        done
}

# Check if composer is installed
curl -s "${FULL_REPO_URL}/composer-validation" | bash

# Define tools array with values: human-readable name, package name, config URL
tools=(
    "$PHPCS_NAME:$PHPCS_PACKAGE:$PHPCS_CONFIG_URL"
    "$PHPMD_NAME:$PHPMD_PACKAGE:$PHPMD_CONFIG_URL"
    "$PHPCSFIXER_NAME:$PHPCSFIXER_PACKAGE:$PHPCSFIXER_CONFIG_URL"
    "$PHPSTAN_NAME:$PHPSTAN_PACKAGE:$PHPSTAN_CONFIG_URL"
)

# Loop through tools array and call install for each tool
for tool in "${tools[@]}"; do
    IFS=":" read -r name package url <<< "$tool"
    if [[ -z "$name" || -z "$package" ]]; then
        echo "Skipping invalid entry: $tool"
        continue
    fi
    install "$name" "$package" "$url"
done
